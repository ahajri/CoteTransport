{
  "name": "orchestrate",
  "description": "Orchestrate is a database service. It is a simple REST API that is optimized for queries. Orchestrate combines full-text search, graph, time-series, and key/value.",
  "keywords": [
    "full-text search",
    "search",
    "database",
    "dbaas",
    "graph",
    "orchestrate",
    "key",
    "value",
    "events",
    "time-series"
  ],
  "homepage": "http://orchestrate.io/docs",
  "repository": {
    "type": "git",
    "url": "git://github.com/orchestrate-io/orchestrate.js"
  },
  "bugs": {
    "url": "https://github.com/orchestrate-io/orchestrate.js/issues",
    "email": "support@orchestrate.io"
  },
  "license": "Apache-2.0",
  "author": {
    "name": "Steve Kaliski",
    "email": "steve@bowery.io",
    "url": "http://stevekaliski.com"
  },
  "version": "0.5.1",
  "main": "index",
  "tags": [
    "orchestrate",
    "driver"
  ],
  "dependencies": {
    "request": "~2.62.0",
    "kew": "~0.7.0",
    "parse-link-header": "~0.4.1"
  },
  "devDependencies": {
    "coveralls": "^2.11.4",
    "expect.js": "0.3.1",
    "jscoverage": "^0.6.0",
    "mocha": "^2.3.2",
    "mocha-lcov-reporter": "0.0.2"
  },
  "scripts": {
    "test": "npm run cov && mocha -u tdd -t 5000",
    "cov": "jscoverage lib lib-cov",
    "report": "npm run cov && mocha -u tdd -R html-cov -t 5000 > coverage.html",
    "coveralls": "npm run cov && mocha -u tdd -t 5000 -R mocha-lcov-reporter | ./node_modules/coveralls/bin/coveralls.js"
  },
  "readme": "# orchestrate.js [![Build Status](https://travis-ci.org/orchestrate-io/orchestrate.js.png)](https://travis-ci.org/orchestrate-io/orchestrate.js) [![Coverage Status](https://coveralls.io/repos/orchestrate-io/orchestrate.js/badge.png)](https://coveralls.io/r/orchestrate-io/orchestrate.js)\n\n[![NPM](https://nodei.co/npm/orchestrate.png)](https://nodei.co/npm/orchestrate/)\n\nNode Driver for [Orchestrate.io](http://orchestrate.io).\n\n\n# Installation\n\n```\n$ npm install orchestrate\n```\n\n# Running Tests\nCurrently, Orchestrate.js runs against the actual Orchestrate API. At the moment, there is no available local version to work with.\n\nThe tests will write data to collections in the app associated with an api key you provide. The collection names are unlikely to collide with any of your own. You will need to export your api key for the tests to use it (see below). If your app is NOT located in AWS US East, you will also need to export a variable indicating the datacenter (see example below). A list of the datacenter and the endpoints can be found here [Datacenters](https://orchestrate.io/docs/multi-data-center) (be sure to only provide the hostname for the value).\n\nEnsure all dependencies are installed within the orchestrate director by running\n\n```\n$ npm install\n```\nTo run tests:\n\n```\n# provide your own api_key value\n$ export ORCHESTRATE_API_KEY=\"Enter API key HERE\"\n# in this example, the app is located in CTL-UC1, update as appropriate\n# for your app's Datacenter https://orchestrate.io/docs/multi-data-center\n$ export ORCHESTRATE_API_ENDPOINT=\"api.ctl-uc1-a.orchestrate.io\"\n$ npm test\n```\n\n# Creating a Client\n\n```javascript\nvar db = require('orchestrate')(token)\n```\n\nNote, the client defaults to the Amazon US East Datacenter. If you've created your Application in a different datacenter, you'll need to configure the client with that Datacenter's Api URL. For example, for Amazon EU West:\n\n```javascript\nvar oio = require('orchestrate');\nvar db = oio(token, 'api.aws-eu-west-1.orchestrate.io');\n```\n\nPlease see the Orchestrate [MDC Docs](https://orchestrate.io/docs/multi-data-center) for more information on Multi-Datacenter.\n\n# Running Queries\n\nOrchestrate comes with support for GET/PUT/DEL for key-value queries, as well as search, graph, and events. Documentation can be found [here](https://orchestrate.io/docs/api/).\n\nAll queries are promise based. Just as a typical function would return a callback containing an error field followed by a result, orchestrate.js returns `then` and `fail` methods.\n\n## Key-Value\n\nTo get a value:\n\n```javascript\ndb.get('collection', 'key')\n.then(function (result) {\n\n})\n.fail(function (err) {\n\n})\n```\n\nTo set a value:\n\n```javascript\ndb.put('collection', 'key', {\n  \"name\": \"Steve Kaliski\",\n  \"hometown\": \"New York, NY\",\n  \"twitter\": \"@stevekaliski\"\n})\n.then(function (result) {\n\n})\n.fail(function (err) {\n\n})\n```\n\nOr, setting a value and allowing the server to generate a key:\n\n```javascript\ndb.post('collection', {\n  \"name\": \"Steve Kaliski\",\n  \"hometown\": \"New York, NY\",\n  \"twitter\": \"@stevekaliski\"\n})\n.then(function (result) {\n\n})\n.fail(function (err) {\n\n})\n```\n\nTo merge (or update) new values into an existing key, construct a partial document with the desired changes and then use `merge`:\n\n```javascript\ndb.merge('collection', 'key', {\n  \"name\": \"Stephen Kaliski\"\n})\n.then(function (result) {\n\n})\n.fail(function (err) {\n\n})\n```\n\nAlternatively, you can apply a series of controlled changes to a key by constructing a patch:\n\n```javascript\ndb.newPatchBuilder('collection', 'key')\n  .add('age', 25)\n  .replace('hometown', 'NY')\n  .apply()\n  .then(function (result) {\n      // All changes were applied successfully\n  })\n  .fail(function (err) {\n     // No changes were applied\n  })\n```\n\n\nOrchestrate also supports [conditional put statements](https://orchestrate.io/docs/api/#key/value/put-(create/update)) that determines whether or not the store operation will occur. `db.put` takes a fourth argument `match` which is either the `ref` value or `false`. If a ref value is provided an `update` will occur if there is a valid match, if false is provided, a `create` will occur if there is no match.\n\n\n```javascript\ndb.put('collection', 'key', data, 'cbb48f9464612f20') // update\ndb.put('collection', 'key', data, false) // create\n```\n\nTo remove a value:\n\n```javascript\ndb.remove('collection', 'key', true)\n.then(function (result) {\n\n})\n.fail(function (err) {\n\n})\n```\n\nThe last parameter is optional. If supplied the ref history will be removed as well.\n\n## Refs\n\nTo get a value at a specific ref:\n\n```javascript\ndb.get('collection', 'key', 'ref')\n.then(function (result) {\n\n})\n.fail(function (err) {\n\n})\n```\n\nTo list refs for a particular key in a collection:\n\n```javascript\ndb.list_refs('collection', 'key')\n.then(function (result) {\n  var items = result.body.results;\n})\n.fail(function (err) {\n\n})\n```\n\n## Collection Creation\n\nThere is no need to explicitly create a collection. Collections are implicitly created when putting a key/value object.\n\n## Collection Listing\n\nTo list items in a collection, you can use [collection listings](https://orchestrate.io/docs/api/#key/value/list).\n\n```javascript\ndb.list('collection')\n.then(function (result) {\n  var items = result.body.results;\n})\n.fail(function (err) {\n\n})\n```\n\nCollection listings allow you to page through your collection in key order (sorted lexicographically so be aware of that if you have numeric keys). It is also useful to list parts of your collection starting from a particular key. For example, to list the first 10 keys starting from key 'c':\n\n\n```javascript\ndb.list('address-book', {limit:10, startKey:'c'})\n.then(function (result) {\n\n})\n.fail(function (err) {\n\n})\n```\n\nNote: if there is no item with key 'c', the first page will simply have the first 10 results that sort after 'c'.\n\nCollection listings support pagination. If there are more items that follow the page that was retrieved, the result will have a 'links.next' that you can use to fetch the next page.\n\n```javascript\ndb.list('address-book', {limit:10, startKey:'c'})\n.then(function (page1) {\n  // Got First Page\n  if (page1.links && page1.links.next) {\n    page1.links.next.get().then(function (page2) {\n      // Got Second Page\n    })\n  }\n})\n.fail(function (err) {\n\n})\n```\n\n## Collection Deletes\n\n```javascript\ndb.deleteCollection('users')\n```\n\n## Search\n\nTo run a quick search, you can simply provide the collection you'd like to search within, your query, and optionally, any query parameters like a `list` or `sort` argument. Currently, Orchestrate supports the [Lucene query syntax](http://lucene.apache.org/core/2_9_4/queryparsersyntax.html).\n\n```javascript\ndb.search('collection', 'query', {\n  sort: 'value.sort:desc',\n  limit: 5,\n  offset: 2\n})\n.then(function (result) {\n\n})\n.fail(function (err) {\n\n})\n```\n\nThe more verbose `SearchBuilder` is also available for a more stately approach:\n\n```javascript\ndb.newSearchBuilder()\n.collection('users')\n.limit(100)\n.offset(10)\n.sort('name', 'desc')\n.sort('age', 'asc')\n.aggregate('stats', 'value.name')\n.stats('username')\n// these two range aggregates are identical\n// but they use different interfaces\n.range('coolness', '*~1:1~2:2~*')\n.range('radness', function (builder) {\n  return builder\n  .before(1)\n  .between(1, 2)\n  .after(2);\n})\n// these two distance aggregates are identical\n// but they use different interfaces\n.distance('location', '*~1:1~2:2~*')\n.distance('hometown', function (builder) {\n  return builder\n  .before(1)\n  .between(1, 2)\n  .after(2);\n})\n.time_series('path', 'day')\n.query('steve')\n```\n\nSearching Events is also supported. Event Searching is done by adding a\n'@path.kind' predicate to the query to indicate what should be searched.\nBy default, Orchestrate will only Search for 'item's in the collection.\n\n```javascript\ndb.newSearchBuilder()\n.collection('users')\n.query('@path.kind:event AND steve')\n```\n\nThere is a builder method to set the 'kind' for you:\n\n```javascript\ndb.newSearchBuilder()\n.collection('users')\n.kinds('event')\n.query('steve')\n```\n\nThis query will find all events in the users collection that have a field\ncontaining 'steve'. You can further limit what event types are searched\nby adding another @path metadata predicate:\n\n```javascript\ndb.newSearchBuilder()\n.collection('users')\n.kinds('event')\n.query('@path.type:activities AND steve')\n```\n\nThis further restricts the search to event type 'activities'.\n\nYou can also Search both items and events.\n\n```javascript\ndb.newSearchBuilder()\n.collection('users')\n.kinds('item', 'event')\n.query('steve')\n```\n\nThe result items will have a mix of matching items and events. Each result\nhas a 'path' element, and the 'path.kind' element can be used to determine\nwhat the result kind is. For example:\n\n```json\n{\n    \"count\": 2,\n    \"total_count\": 2,\n    \"results\": [\n        {\n            \"path\": {\n                \"collection\": \"users\",\n                \"kind\": \"item\",\n                \"key\": \"sjkaliski@gmail.com\",\n                \"ref\": \"74c22b1736b9d50e\",\n                \"reftime\": 1424473968410\n            },\n            \"value\": {\n                \"name\": \"Steve Kaliski\",\n                \"hometown\": \"New York, NY\",\n                \"twitter\": \"@stevekaliski\"\n            },\n            \"score\": 3.7323708534240723,\n            \"reftime\": 1424473968410\n        },\n        {\n            \"path\": {\n                \"collection\": \"users\",\n                \"kind\": \"event\",\n                \"key\": \"byrd@bowery.io\",\n                \"type\": \"activities\",\n                \"timestamp\": 1412787145997,\n                \"ordinal\": 406893558185357300,\n                \"ref\": \"82eafab14dc84ed3\",\n                \"reftime\": 1412787145997,\n                \"ordinal_str\": \"05a593890d087000\"\n            },\n            \"value\": {\n                \"activity\": \"followed\",\n                \"user\": \"sjkaliski@gmail.com\",\n                \"userName\": \"Steve Kaliski\"\n            },\n            \"score\": 2.331388473510742,\n            \"reftime\": 1412787145997\n        }\n    ]\n}\n```\n\nFor more information about Orchestrate search, [read the docs](http://orchestrate.io/docs/apiref#search).\n\n## Graphs\nAn awesome feature Orchestrate includes is the ability to generate graphs between collections. For example, consider the collections `users` and `movies`. Some user Steve will `like` a variety of movies. We can generate this relationship:\n\n```javascript\ndb.newGraphBuilder()\n.create()\n.from('users', 'Steve')\n.related('likes')\n.to('movies', 'Superbad')\n```\n\nWe can optionally include a JSON object representing the properties of the relationship -- which are distinct from the properties of the two items connected by the relationship -- like this:\n\n```javascript\ndb.newGraphBuilder()\n.create()\n.data({ \"rating\" : \"5 Stars\" })\n.from('users', 'Steve')\n.related('likes')\n.to('movies', 'Superbad')\n```\n\nWe can use [conditional put statements](https://orchestrate.io/docs/api/#key/value/put-(create/update)) to determine whether or not the store operation will occur. If a ref value is provided an `update` will occur if there is a valid match, if false is provided, a `create` will occur if there is no match.\n\n\n```javascript\n// update if ref matches\ndb.newGraphBuilder()\n.create()\n.data({ \"rating\" : \"4 Stars\" })\n.ref('cbb48f9464612f20')\n.from('users', 'Steve')\n.related('likes')\n.to('movies', 'Superbad')\n\n// create if no previous relationship\ndb.newGraphBuilder()\n.create()\n.data({ \"rating\" : \"4 Stars\" })\n.ref(false)\n.from('users', 'Steve')\n.related('likes')\n.to('movies', 'Superbad')\n```\n\n\nAfter storing this relationship, we can retrieve its properties like this:\n\n```javascript\ndb.newGraphReader()\n.get()\n.from('users', 'Steve')\n.related('likes')\n.to('movies', 'Superbad')\n```\n\nWe can then look up all the different items Steve likes:\n\n```javascript\ndb.newGraphReader()\n.get()\n.from('users', 'Steve')\n.related('likes')\n```\n\nWe can even take this another step further:\n\n```javascript\ndb.newGraphReader()\n.get()\n.from('users', 'Steve')\n.related('friends', 'likes')\n```\n\nThis will return all of the things that friends of Steve have liked. This assumes a friend relation has previously been defined between Steve and another user.\n\nOrchestrate supports offsets and limits for graph relationships as well. To set those values:\n\n```javascript\ndb.newGraphReader()\n.get()\n.limit(1)\n.offset(1)\n.from('users', 'Steve')\n.related('friends', 'likes')\n```\n\nIf we want to delete a graph relationship:\n\n```javascript\ndb.newGraphBuilder()\n.remove()\n.from('users', 'Steve')\n.related('likes')\n.to('movies', 'Superbad')\n```\n\n## Events\nEvents are time-ordered objects that exist with the context of a Key-Value object. Consider comments on a post or messages in a thread.\n\nCreating an event:\n\n```javascript\ndb.newEventBuilder()\n.from('users', 'Steve')\n.type('update')\n.data({\"text\": \"Hello!\"})\n.create()\n```\n\nCreating an event at a specified time:\n\n```javascript\ndb.newEventBuilder()\n.from('users', 'Steve')\n.type('update')\n.time(1384534722568)\n.data({\"text\": \"Hello!\"})\n.create()\n```\n\nListing events:\n\n```javascript\ndb.newEventReader()\n.from('users', 'Steve')\n.start(1384534722568)\n.end(1384535726540)\n.type('update')\n.list()\n```\n\nGetting a specific event:\n\n``` javascript\ndb.newEventReader()\n.from('users', 'Steve')\n.time(1369832019085)\n.ordinal(9)\n.type('update')\n.get()\n```\n\nUpdating an event:\n\n``` javascript\ndb.newEventBuilder()\n.from('users', 'Steve')\n.type('update')\n.time(1369832019085)\n.ordinal(9)\n.data({\n  \"text\": \"Orchestrate is awesome!\"\n})\n.update()\n```\n\nUpdating an event, conditionally:\n\n``` javascript\ndb.newEventBuilder()\n.from('users', 'Steve')\n.type('update')\n.time(1369832019085)\n.ordinal(9)\n.data({\n  \"text\": \"Orchestrate is awesome!\"\n})\n.ref('ae3dfa4325abe21e')\n.update()\n```\n\nDeleting an event:\n\n``` javascript\ndb.newEventBuilder()\n.from('users', 'Steve')\n.type('update')\n.time(1369832019085)\n.ordinal(9)\n.remove()\n```\n\n## Validate Key\n\nIf you want to make sure your key is valid, you can simply \"ping\" Orchestrate.\n\n```javascript\ndb.ping()\n.then(function () {\n  // you key is VALID\n})\n.fail(function (err) {\n  // your key is INVALID\n})\n```\n",
  "readmeFilename": "README.md",
  "_id": "orchestrate@0.5.1",
  "_shasum": "62a32a3c399fd41a709e9e760be29a00683caa0c",
  "_from": "orchestrate@",
  "_resolved": "https://registry.npmjs.org/orchestrate/-/orchestrate-0.5.1.tgz"
}
