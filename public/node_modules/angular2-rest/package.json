{
  "name": "angular2-rest",
  "version": "0.1.0",
  "description": "Angular2 HTTP client to consume RESTful services.",
  "typings": "./angular2-rest.d.ts",
  "scripts": {
    "test": "gulp test"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Paldom/angular2-rest.git"
  },
  "keywords": [
    "angular2",
    "angulario",
    "http",
    "rest",
    "client"
  ],
  "author": {
    "name": "Domonkos Pal",
    "email": "Paldom"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/Paldom/angular2-rest/issues"
  },
  "homepage": "https://github.com/Paldom/angular2-rest#readme",
  "dependencies": {
    "angular2": "^2.0.0-beta.0",
    "es6-promise": "^3.0.2",
    "es6-shim": "^0.33.13",
    "reflect-metadata": "^0.1.2",
    "rxjs": "^5.0.0-beta.0",
    "zone.js": "^0.5.10"
  },
  "devDependencies": {
    "gulp": "^3.9.0",
    "gulp-jasmine": "^2.2.1",
    "gulp-rename": "^1.2.2",
    "gulp-sourcemaps": "^1.6.0",
    "gulp-tsc": "^1.1.4",
    "gulp-typedoc": "^1.2.1",
    "gulp-typescript": "^2.10.0",
    "gulp-uglify": "^1.5.1",
    "object-merge": "^2.5.1"
  },
  "readme": "# angular2-rest\nAngular2 HTTP client to consume RESTful services. Built on angular2/http with TypeScript.  \n**Note:** this solutions is not production ready, it's in a very basic alpha state. Any ideas or contributions are very welcomed :)\n\n## Installation\n\n```sh\nnpm install angular2-rest\n```\n\n## Example\n\n```ts\n\nimport {Request, Response} from 'angular2/http';\nimport {RESTClient, GET, PUT, POST, DELETE, BaseUrl, Headers, DefaultHeaders, Path, Body, Query} from 'angular2-rest';\n\nimport {Todo} from './models/Todo';\nimport {SessionFactory} from './sessionFactory';\n\n@Injectable()\n@BaseUrl(\"http://localhost:3000/api/\")\n@DefaultHeaders({\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n})\nexport class TodoRESTClient extends RESTClient {\n\n    protected requestInterceptor(req: Request) {\n        if (SessionFactory.getInstance().isAuthenticated) {\n            req.headers.append('jwt', SessionFactory.getInstance().credentials.jwt);\n        }\n    }\n    \n    protected requestInterceptor(req: Response) {\n        // do sg with responses\n    }\n\n    @GET(\"todo/\")\n    public getTodos( @Query(\"sort\") sort?: string): Observable { return null; };\n\n    @GET(\"todo/{id}\")\n    public getTodoById( @Path(\"id\") id: string): Observable { return null; };\n\n    @POST(\"todo\")\n    public postTodo( @Body todo: Todo): Observable { return null; };\n\n    @PUT(\"todo/{id}\")\n    public putTodoById( @Path(\"id\") id: string, @Body todo: Todo): Observable { return null; };\n\n    @DELETE(\"todo/{id}\")\n    public deleteTodoById( @Path(\"id\") id: string): Observable { return null; };\n\n}\n\n```\n\n## API Docs\n\n### RESTClient\n#### Methods:\n- `getBaseUrl(): string`: returns the base url of RESTClient\n- `getDefaultHeaders(): Object`: returns the default headers of RESTClient in a key-value pair\n\n### Class decorators:\n- `@BaseUrl(url: string)`\n- `@DefaultHeaders(headers: Object)`\n\n### Method decorators:\n- `@GET(url: String)`\n- `@POST(url: String)`\n- `@PUT(url: String)`\n- `@DELETE(url: String)`\n- `@Headers(headers: Object)`\n\n### Parameter decorators:\n- `@Path(key: string)`\n- `@Query(key: string)`\n- `@Header(key: string)`\n- `@Body`\n\n# License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "angular2-rest@0.1.0",
  "_shasum": "6301d894e1ad4b15f3cb775f69781faf14d51669",
  "_from": "angular2-rest@",
  "_resolved": "https://registry.npmjs.org/angular2-rest/-/angular2-rest-0.1.0.tgz"
}
